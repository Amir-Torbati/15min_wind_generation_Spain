import requests
import pandas as pd
from datetime import datetime, timedelta, timezone, date
from zoneinfo import ZoneInfo
from dateutil.rrule import rrule, DAILY
import duckdb
import os

# --- CONFIG ---
API_TOKEN = "YOUR_API_TOKEN_HERE"
BASE_URL = "https://api.esios.ree.es/indicators/540"  # Wind
HEADERS = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "x-api-key": API_TOKEN,
}
DB_PATH = "database/full_wind_data"
QUARTER_FREQ = "15min"

# --- Load database ---
os.makedirs("database", exist_ok=True)
if os.path.exists(f"{DB_PATH}.csv"):
    df_db = pd.read_csv(f"{DB_PATH}.csv", parse_dates=["datetime"])
else:
    print("‚ö†Ô∏è No existing DB. Exiting.")
    exit()

# --- Generate expected timestamps ---
start = df_db["datetime"].min()
end = datetime.now(timezone.utc).replace(second=0, microsecond=0)

if pd.isna(start):
    print("‚ö†Ô∏è Database is empty. Exiting.")
    exit()

expected = pd.date_range(
    start=start.astimezone(timezone.utc),
    end=end.astimezone(timezone.utc),
    freq=QUARTER_FREQ,
    tz="UTC"
)
existing = pd.to_datetime(df_db["datetime_utc"])
missing = expected.difference(existing)

# --- Exit if no missing ---
if missing.empty:
    print("‚úÖ No missing timestamps.")
    missing_days = []
else:
    print(f"üîç Found {len(missing)} missing timestamps.")
    missing_days = sorted(set(ts.date() for ts in missing))

# --- Fetch missing data ---
all_new = []
failed_days = []

for day in rrule(freq=DAILY, dtstart=missing_days[0], until=missing_days[-1]) if missing_days else []:
    day_start = datetime.combine(day, datetime.min.time(), tzinfo=timezone.utc)
    day_end = day_start + timedelta(days=1)

    params = {
        "start_date": day_start.isoformat(),
        "end_date": day_end.isoformat(),
        "time_trunc": "quarter-hour"
    }

    try:
        print(f"üì° Fetching {day.date()}...")
        res = requests.get(BASE_URL, headers=HEADERS, params=params)
        if res.status_code == 403:
            print("‚õî 403 Forbidden ‚Äì Token expired or unauthorized")
            failed_days.append(str(day.date()))
            continue
        res.raise_for_status()
        values = res.json()["indicator"]["values"]
        df = pd.DataFrame(values)
        if not df.empty and "datetime" in df.columns:
            df["datetime"] = pd.to_datetime(df["datetime"])
            all_new.append(df)
        else:
            failed_days.append(str(day.date()))
    except Exception as e:
        print(f"  ‚ùå Error on {day.date()}: {e}")
        failed_days.append(str(day.date()))

# --- Save to all formats ---
if all_new:
    df_new = pd.concat(all_new)
    df_combined = pd.concat([df_db, df_new])
    df_combined = df_combined.drop_duplicates(subset=["datetime"]).sort_values("datetime")

    df_combined.to_csv(f"{DB_PATH}.csv", index=False)
    df_combined.to_parquet(f"{DB_PATH}.parquet", index=False)

    con = duckdb.connect(f"{DB_PATH}.duckdb")
    con.execute("CREATE OR REPLACE TABLE wind AS SELECT * FROM df_combined")
    con.close()

    print(f"‚úÖ Appended {len(df_new)} rows. DB now has {len(df_combined)} rows.")
else:
    print("‚ö†Ô∏è No new data fetched.")

# --- Save Markdown Report ---
os.makedirs("reports", exist_ok=True)
report_path = f"reports/missing_data_report_{date.today()}.md"

with open(report_path, "w") as f:
    f.write(f"# üìä Weekly Wind Data Integrity Report\n\n")
    f.write(f"üóìÔ∏è **Report Date:** `{date.today()}`\n\n")

    if missing.empty:
        f.write("‚úÖ All expected data is present. No missing days.\n")
    else:
        f.write("## ‚ùå Missing Timestamps Found\n")
        f.write(f"Total Missing Timestamps: `{len(missing)}`\n\n")
        if failed_days:
            f.write("### ‚ö†Ô∏è Days that could not be retrieved:\n\n")
            f.write("| # | Missing Day |\n|---|--------------|\n")
            for i, d in enumerate(failed_days, 1):
                f.write(f"| {i} | {d} |\n")
        else:
            f.write("‚úÖ All missing values successfully retrieved.\n")

    f.write("\n---\n")
    f.write("üõ†Ô∏è Ensure token is valid and retry for any failed days.\n")
    f.write("‚úÖ Data stored in:\n")
    f.write("- `database/full_wind_data.csv`\n")
    f.write("- `database/full_wind_data.parquet`\n")
    f.write("- `database/full_wind_data.duckdb`\n\n")
    f.write("üë§ Report auto-generated by the wind pipeline.\n")
    f.write("Created with üíö by *Amir Torbati*\n")





